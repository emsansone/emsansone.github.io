<!DOCTYPE html>

<head>
<!-- saved from url=(0028) https://emsansone.github.io/ -->
<!-- <html class=" js no-touch rgba hsla textshadow opacity svg" lang="en"><!--<![endif]-->
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-169038417-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-169038417-1');
</script>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Emanuele Sansone</title>
<meta name="description" content="Emanuele Sansone">
<meta name="keywords" content="Jekyll, theme, responsive, blog, template">


<!-- Twitter Cards -->
<meta name="twitter:title" content="Emanuele Sansone">
<meta name="twitter:description" content="Emanuele Sansone">



<!--<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:image" content="https://emsansone.github.io/img/Background3.jpg">-->

<!-- Open Graph -->
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="Emanuele Sansone">
<meta property="og:description" content="Emanuele Sansone">
<meta property="og:url" content="https://emsansone.github.io/blog/">
<meta property="og:site_name" content="Emanuele Sansone">





<link rel="canonical" href="https://emsansone.github.io/blog/">

<!-- http://t.co/dKP3o1e -->
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- For all browsers -->
<link rel="stylesheet" href="https://emsansone.github.io/assets/css/main.css">
    
<meta http-equiv="cleartype" content="on">
        
<!-- Modernizr -->
<script src="https://emsansone.github.io/assets/js/vendor/modernizr-2.7.1.custom.min.js"></script>
        
<link href='//fonts.googleapis.com/css?family=PT+Sans+Narrow:400,700%7CPT+Serif:400,700,400italic' rel='stylesheet' type='text/css'>


<!-- Icons -->
<!-- 16x16 -->
<link rel="shortcut icon" href="https://emsansone.github.io/img/logo.png">
<!-- 32x32 -->
<link rel="shortcut icon" href="https://emsansone.github.io/img/logo-32x32.png">
<!-- 57x57 (precomposed) for iPhone 3GS, pre-2011 iPod Touch and older Android devices -->
<link rel="apple-touch-icon-precomposed" href="https://emsansone.github.io/img/logo-57x57.png">
<!-- 72x72 (precomposed) for 1st generation iPad, iPad 2 and iPad mini -->
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://emsansone.github.io/img/logo-72x72.png">
<!-- 114x114 (precomposed) for iPhone 4, 4S, 5 and post-2011 iPod Touch -->
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://emsansone.github.io/img/logo-114x114.png">
<!-- 144x144 (precomposed) for iPad 3rd and 4th generation -->
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://emsansone.github.io/img/logo-144x144.png">

</head>

<!-- Load mathjax -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML"></script>
<!-- MathJax configuration -->
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
        displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
        processEscapes: true,
        processEnvironments: true
    },
    // Center justify equations in code and markdown cells. Elsewhere
    // we use CSS to left justify single line equations in code cells.
    displayAlign: 'center',
    "HTML-CSS": {
        styles: {'.MathJax_Display': {"margin": 0}},
        linebreaks: { automatic: false }
    }
});
</script>

<body class="page">

<div class="navigation-wrapper">
	<div class="site-name">
		<a href="https://emsansone.github.io/">Website</a>
	</div><!-- /.site-name -->
    <div class="top-navigation">
        <nav role="navigation" id="site-nav" class="nav">
		    <ul>
              <li><a href="https://emsansone.github.io/blog/atp/atp0.htm">Index</a></li>	        					    
					    <li><a href="https://emsansone.github.io/blog/atp/atp1.htm" >Previous Lecture</a></li>
					    <li><a href="https://emsansone.github.io/blog/atp/atp3.htm" >Next Lecture</a></li>

		    </ul>
		</nav>
	</div><!-- /.top-navigation -->
</div><!-- /.navigation-wrapper -->


<!--<div class="image-wrap">
    <img src="https://emsansone.github.io/img/Background3.jpg" alt="Emanuele Sansone feature image">
</div>-->

<div id="main" role="main">
  <div class="article-author-side">
    <img src="https://emsansone.github.io/img/Me.jpg" class="bio-photo" alt="Emanuele Sansone bio photo">

    <h2>Emanuele Sansone</h2>
    <p>PhD in machine learning and artificial intelligence.</p>
    <a href="mailto:e.sansone@hotmail.it" class="author-social" target="_blank"><img src="https://emsansone.github.io/img/email.png" height=14px width=14px> Email</a>

    <a href="https://linkedin.com/in/emanuele-sansone-97329475" class="author-social" target="_blank"><img src="https://emsansone.github.io/img/linkedin.png" height=14px width=14px> LinkedIn</a>

    <a href="https://twitter.com/skiera87" class="author-social" target="_blank"><img src="https://emsansone.github.io/img/twitter.png" height=14px width=14px> Twitter</a>

    <!-- <a href="https://github.com/emsansone" class="author-social" target="_blank"><img src="https://emsansone.github.io/img/github.png" height=14px width=14px> Github</a> -->
  </div>

  <article class="page">

    <div class="article-wrap" style="width:140%;text-align:justify;">
    
      <h2 id="Proving-Conjectures-in-Propositional-Logic-(SAT)">Proving Conjectures in Propositional Logic (SAT)</h2>
      <p>Propositional logic corresponds to the satisfiability problem (SAT). It is known to be NP-complete.
        Only, the special case of 2-SAT is polynomial solvable (by converting the problem to computing the strongly connected components).<br/><br/>
        <strong>Ingredients</strong></p>
        <ul>
        <li>The basic unit of propositional logic is the <strong>proposition</strong>, which may be either true or false.</li>
        <li>A set of operators, viz. conjunction $\land$, disjunction $\lor$ and negation $\neg$ (equivalence and implication are derived from these ones).</li>
        </ul>
        <p>An example of implication, <em>If Jack knows Julie, Julie knows Jack</em>.<br/><br/>
        <strong>PROPOSITIONAL LOGIC IS DECIDABLE</strong>. <strong>Proof</strong>. For any statement you can use a truth table!<br/><br/>
        Let's find a more efficient method than computing truth tables.<br/><br/>
        <strong>Definitions</strong></p>
        <ul>
        <li>A proposition $l$ is also called a <strong>literal</strong>.</li>
        <li>A <strong>clause</strong> $C$ is a disjunction of literals $l_1\lor l_2\lor\dots\lor l_n$ or equivalently a set of literals $\{l_1,l_2,\dots,l_n\}$.</li>
        <li>A <strong>clausal form</strong> (expressed in conjuctive normal form, CNF) $\Sigma$ is a conjuction of clauses $C_1\land\dots\land C_c$ or equivalently a set of clauses (a set of sets) $\{C_1,\dots,C_c\}$.</li>
        <li>Given a clausal form $\Sigma$, a <strong>refutation</strong> is the derivation of a contradiction $\perp$, namely $\Sigma\vdash\perp$.  </li>
        </ul>
        <p>Now we want to define an inference rule which is used for <strong>refutation of clauses</strong>. Consider two clauses $C_1=\{l,a,\dots\}$ and $C_1=\{\neg l,b,\dots\}$. These two clauses are said to <strong>clash</strong>.
        Therefore, we can define the <strong>resolvent</strong> of the two clashing clauses as $C=C_1\setminus\{l\}\cup C_2\setminus\{\neg l\}$</p>
        <blockquote><p><strong>Resolution</strong>. Given a clausal form $\Sigma$, resolution takes two clashing clauses $C_1,C_2$ computes the resolvent $C$ and add it to the clausal form. We can easily prove that $\{C_1,C_2,C\}$ preserves the truth of $\Sigma$.</p>
        </blockquote>
        <p>Note that resolution allows to derive a contradiction, in fact if $C_1=\{a\}$ and $C_2=\{\neg a\}$, then the resolvent is $C=\{\perp\}$.<br/><br/>
        <strong>Theorem</strong>. Resolution is <strong>sound and complete for refutation</strong>. In fact, if resolution derives a contradiction, then the statement logically entails a contradiction $\Sigma\vdash\perp\implies\Sigma\models\perp$ (soundness) and if a statement is contradictory, resolution admits a refutation (completeness) $\Sigma\models\perp\implies\Sigma\vdash\perp$.<br/>
        <strong>Proof of soundness</strong>. Trivially obtained by the fact that resolution preserves the truth of clauses.<br/><br/>
        It is important to mention that in this case there is a finite number of possible resolution steps, <strong>which is bounded above by the number of possible combinations of literals</strong> (as there is a limit on the possible number of clauses that can be added). <strong>Therefore, resolution is guaranteed to find a contradiction if the statement is unsatisfiable. Furthermore, if no contradiction is found, the statement is satisfiable</strong>.<br/><br/>
        
        <strong>RESOLUTION REFUTATION IS A METHOD TO DECIDE ABOUT SATISFIABILITY IN PROPOSITIONAL LOGIC AND IS IN GENERAL MORE EFFICIENT THAN COMPUTING TRUTH TABLES</strong>.<br/><br/>
        <strong>Example</strong><br/><br/>
        
        <div style="overflow: auto"><span class="math display">\[\begin{array}{ll}
          1. \{\neg p,\neg q, r\} &amp; \\
          2. \{p, r\} &amp; \\
          3. \{q,r\} &amp; \\
          4. \{\neg r\} &amp; \\
          &amp; \\
          &amp; \\
          &amp; \\
      \end{array}
      \quad\rightarrow\quad
      \begin{array}{ll}
          1. \{\neg p,\neg q, r\} &amp; \\
          2. \{p, r\} &amp; \\
          3. \{q,r\} &amp; \\
          4. \{\neg r\} &amp; \\
          5. \{\neg q, r\} &amp; \text{resolve 1,2} \\
          &amp; \\
          &amp; \\
      \end{array}
      \quad\rightarrow\quad
      \begin{array}{ll}
          1. \{\neg p,\neg q, r\} &amp; \\
          2. \{p, r\} &amp; \\
          3. \{q,r\} &amp; \\
          4. \{\neg r\} &amp; \\
          5. \{\neg q, r\} &amp; \text{resolve 1,2} \\
          6. \{r\} &amp; \text{resolve 3,5} \\
          &amp; \\
      \end{array}
      \quad\rightarrow\quad
      \begin{array}{ll}
          1. \{\neg p,\neg q, r\} &amp; \\
          2. \{p, r\} &amp; \\
          3. \{q,r\} &amp; \\
          4. \{\neg r\} &amp; \\
          5. \{\neg q, r\} &amp; \text{resolve 1,2} \\
          6. \{r\} &amp; \text{resolve 3,5} \\  
          7. \perp &amp; \text{resolve 4,6}
      \end{array}
      \]</span></div></p><br/>

      <p><strong>Problems</strong><br/><br/>
      Note also that (i) resolution <strong>increases</strong> the set of clauses and (ii) it <strong>can increase</strong> the number of literals in the clauses. This creates problems of <strong>inefficiency</strong> when trying to detect <strong>unsatisfiable statements</strong>. <strong>Smarter selection of clauses can improve the convergence to refutation</strong>. Nevertheless, <strong>if a statement is satisfiable, you need to check ALL POSSIBLE RESOLUTION STEPS</strong>.</p>
              
    </div><!-- /.article-wrap -->

    <div id="disqus_thread" style="width:140%;text-align:justify;margin-top:3cm;margin-bottom:2cm;"></div>
    <script>
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://ema87.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
    </script>
            
  </article>
</div><!-- /#index -->
                    

<div class="footer-wrap">
  <footer>
<span>&copy; 2020 Emanuele Sansone.

  </span></footer>
</div><!-- /.footer-wrap -->

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="https://emsansone.github.io/assets/js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
<script src="https://emsansone.github.io/assets/js/scripts.min.js"></script>

</body></html>
